# Build Stage: using Go 1.24 image

FROM registry.redhat.io/ubi9/go-toolset:1.24@sha256:3f552f246b4bd5bdfb4da0812085d381d00d3625769baecaed58c2667d344e5c AS builder

ARG TARGETOS
ARG TARGETARCH
USER root 

# Install build tools
# commenetd as these packges are present in ubi9
# RUN dnf install -y gcc-c++ libstdc++ libstdc++-devel clang && dnf clean all
RUN dnf install -y 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm' && \
    dnf install -y gcc-c++ libstdc++ libstdc++-devel clang zeromq-devel pkgconfig && \
    dnf clean all

WORKDIR /workspace
USER root
RUN cp /cachi2/output/deps/generic/epel-release-latest-9.noarch.rpm /workspace

RUN dnf install -y epel-release-latest-9.noarch.rpm && \
    dnf install -y gcc-c++ libstdc++ libstdc++-devel clang zeromq-devel pkgconfig && \
    dnf clean all

# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum

# Copy the go source
COPY cmd/ cmd/
COPY pkg/ pkg/

RUN cp /cachi2/output/deps/generic/libtokenizers.${TARGETOS}-${TARGETARCH}.tar.gz /workspace

# HuggingFace tokenizer bindings
RUN mkdir -p lib
RUN tar -xz -f libtokenizers.${TARGETOS}-${TARGETARCH}.tar.gz -C lib
RUN ranlib lib/*.a

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make image-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
ENV CGO_ENABLED=1
ENV GOOS=${TARGETOS:-linux}
ENV GOARCH=${TARGETARCH}
RUN go build -mod=mod -a -o bin/epp -ldflags="-extldflags '-L$(pwd)/lib'" cmd/epp/main.go

# Use ubi9 as a minimal base image to package the manager binary
# Refer to https://catalog.redhat.com/software/containers/ubi9/ubi-minimal/615bd9b4075b022acc111bf5 for more details
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

WORKDIR /
COPY --from=builder /workspace/bin/epp /app/epp

# Install zeromq runtime library needed by the manager.
# The final image is UBI9, so we need epel-release-9.
USER root
RUN microdnf install -y dnf && \
    dnf install -y 'https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm' && \
    dnf install -y zeromq

USER 65532:65532

# expose gRPC, health and metrics ports
EXPOSE 9002
EXPOSE 9003
EXPOSE 9090

# expose port for KV-Events ZMQ SUB socket
EXPOSE 5557

ENTRYPOINT ["/app/epp"]

LABEL com.redhat.component="odh-must-gather" \
      name="odh-must-gather" \
      description="odh-must-gather" \
      summary="odh-must-gather" \
      io.openshift.expose-services="9002/grpc,9003/grpc-health,9090/grpc-prometheus" \
      io.k8s.display-name="odh-must-gather" \
      io.k8s.description="odh-must-gather"
